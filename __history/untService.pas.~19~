unit untService;

{
  Propriedade Name: "VitorFornazieri_Delphi_Service_Example"
  - é o nome que será registrado em uma chave de registro em HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
  Propriedade DisplayNames "Vitor Fornazieri Delphi Service Example"
  - é um nome mais amigavel, que aparece na lista de serviços do windows
}

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.SvcMgr, Vcl.Dialogs;

type
  TVitorFornazieri_Delphi_Service_Example = class(TService)
    procedure ServiceExecute(Sender: TService);
    procedure ServiceAfterInstall(Sender: TService);
    procedure ServiceAfterUninstall(Sender: TService);
    procedure ServiceBeforeInstall(Sender: TService);
    procedure ServiceBeforeUninstall(Sender: TService);
    procedure ServiceContinue(Sender: TService; var Continued: Boolean);
    procedure ServiceCreate(Sender: TObject);
    procedure ServiceDestroy(Sender: TObject);
    procedure ServicePause(Sender: TService; var Paused: Boolean);
    procedure ServiceShutdown(Sender: TService);
    procedure ServiceStart(Sender: TService; var Started: Boolean);
    procedure ServiceStop(Sender: TService; var Stopped: Boolean);
  private
    { Private declarations }
  public
    function GetServiceController: TServiceController; override;
    { Public declarations }
  end;

var
  VitorFornazieri_Delphi_Service_Example: TVitorFornazieri_Delphi_Service_Example;

procedure doSaveLog(msg: String);

implementation

{$R *.dfm}

procedure doSaveLog(msg: String);
var
  strList : TStringList;
begin
  try
    //cria uma lista de strings para armazenar o conteudo em log
    strList := TStringList.Create;
    try
      //verifica se existe o arquivo de log
      if FileExists('c:\log.log') then
      begin
        strList.LoadFromFile('c:\log.log');
      end;
      strList.Add(TimeToStr(Now()) + ':' + msg);
    except on E:Exception do
      begin
        strList.Add(TimeToStr(Now()) + ': Erro ' + E.Message);
      end;
    end;
  finally
    //atualiza o log
    strList.SaveToFile('c:\log.log');
    //libera a lista
    strList.Free;
  end;
end;

procedure ServiceController(CtrlCode: DWord); stdcall;
begin
  VitorFornazieri_Delphi_Service_Example.Controller(CtrlCode);
end;

function TVitorFornazieri_Delphi_Service_Example.GetServiceController: TServiceController;
begin
  Result := ServiceController;
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceAfterInstall(
  Sender: TService);
begin
  doSaveLog('ServiceAfterInstall');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceAfterUninstall(
  Sender: TService);
begin
  doSaveLog('ServiceAfterUninstall');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceBeforeInstall(
  Sender: TService);
begin
  doSaveLog('ServiceBeforeInstall');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceBeforeUninstall(
  Sender: TService);
begin
  doSaveLog('ServiceBeforeUninstall');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceContinue(
  Sender: TService; var Continued: Boolean);
begin
  doSaveLog('ServiceContinue');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceCreate(
  Sender: TObject);
begin
  doSaveLog('ServiceCreate');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceDestroy(
  Sender: TObject);
begin
  doSaveLog('ServiceDestroy');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceExecute(
  Sender: TService);
begin
  doSaveLog('ServiceExecute');
  while not self.Terminated do
    ServiceThread.ProcessRequests(true);
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServicePause(Sender: TService;
  var Paused: Boolean);
begin
  doSaveLog('ServicePause');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceShutdown(
  Sender: TService);
begin
  doSaveLog('ServiceShutdown');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceStart(Sender: TService;
  var Started: Boolean);
begin
  doSaveLog('ServiceStart');
end;

procedure TVitorFornazieri_Delphi_Service_Example.ServiceStop(Sender: TService;
  var Stopped: Boolean);
begin
  doSaveLog('ServiceStop');
end;

end.
